public class Solution {
    public string ReverseParentheses(string s) {
        // Convert the input string to a character array
        char[] arr = s.ToCharArray();
        // Stack to store the positions of opening parentheses
        Stack<int> stack = new Stack<int>();

        for (int i = 0; i < arr.Length; i++) {
            if (arr[i] == '(') {
                // Push the position of '(' onto the stack
                stack.Push(i);
            } else if (arr[i] == ')') {
                // Pop the position of the last '('
                int j = stack.Pop();
                // Reverse the substring between the positions j and i
                Reverse(arr, j + 1, i - 1);
            }
        }

        // Build the final result string, excluding parentheses
        StringBuilder result = new StringBuilder();
        foreach (char ch in arr) {
            if (ch != '(' && ch != ')') {
                result.Append(ch);
            }
        }

        return result.ToString();
    }

     private void Reverse(char[] arr, int left, int right) {
        while (left < right) {
            char temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
            left++;
            right--;
        }
    }
}
